name: Docker Build Template

on:
  workflow_call:
    inputs:
      tag_prefix:
        required: true
        type: string
      branch:
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3 
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get the latest tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || echo '')
        echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_OUTPUT

    - name: Set version
      id: set_version
      run: |
        if [[ "${{ inputs.branch }}" == "master" ]]; then
          # Use the latest git tag for master, or fallback to a default version
          LATEST_TAG="${{ steps.get_latest_tag.outputs.LATEST_TAG }}"
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No git tag found for master branch. Using default version."
            NEW_VERSION="v0.0.0"
          else
            NEW_VERSION="${LATEST_TAG}"
          fi
        else
          # Staging versioning (branch-sha-timestamp)
          GIT_BRANCH="${{ github.ref_name }}"
          GIT_SHA="${{ github.sha }}"
          TIMESTAMP=$(date +%s)
          NEW_VERSION="${GIT_BRANCH}-${GIT_SHA:0:7}-${TIMESTAMP}"
        fi
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: ${{ steps.set_version.outputs.NEW_VERSION }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=
        platforms: linux/amd64,linux/arm64